import torch
import torch.nn as nn
import tiktoken

GPT_CONFIG_124M = {
    "vocab_size": 50257,
    "context_length": 1024,
    "emb_dim": 768,
    "n_heads": 12,
    "n_layers": 12,
    "drop_rate": 0.1,
    "qkv_bias": False
}

print(GPT_CONFIG_124M)


class DummyGPTModel(nn.Module):
    def __init__(self, cfg):
        super().__init__()

        self.tok_emb = nn.Embedding(cfg["vocab_size"], cfg["emb_dim"])
        self.pos_emb = nn.Embedding(cfg["context_length"], cfg["emb_dim"])
        self.drop_emb = nn.Dropout(cfg["drop_rate"])

        #unpacked list 
        self.trf_blocks = nn.Sequential(*[DummyTransformerBlock(cfg) for _ in range(cfg["n_layers"])])

        self.final_norm = DummyLayerNorm(cfg["emb_dim"])

        self.out_head = nn.Linear(cfg["emb_dim"], cfg["vocab_size"], bias=False)

    def forward(self, in_idx):
        batch_size, seq_len = in_idx.shape
        tok_embeds = self.tok_emb(in_idx)
        pos_embeds = self.pos_emb(torch.arange(seq_len, device=in_idx.device))

        x = tok_embeds + pos_embeds

        x = self.drop_emb(x)

        #Las tengo que hacer
        x = self.trf_blocks(x)
        x = self.final_norm(x)

        logits = self.out_head(x)

        return logits



        

class DummyTransformerBlock(nn.Module):
    def __init__(self, cfg):
        super().__init__()
    
    def forward(self, x):
        return x

class DummyLayerNorm(nn.Module):
    def __init__(self, normalized_shape, eps=1e-5):
        super().__init__()
    
    def forward(self, x):
        return x

tokenizer = tiktoken.get_encoding("gpt2")

batch = []

txt1 = "Every effort moves you"
txt2 = "Every day holds a"

#estos estan codificados
batch.append(torch.tensor(tokenizer.encode(txt1)))
batch.append(torch.tensor(tokenizer.encode(txt2)))

batch = torch.stack(batch, dim=0)

print(batch.shape)
print(batch)

torch.manual_seed(123)
model = DummyGPTModel(GPT_CONFIG_124M)

logits = model(batch)
print(logits.shape)
print(logits)


2 6 2 1
los primeros se fueron hacia arriba

y los segundos se fueron hacia abajo
tensor([[[[-0.5740],
          [ 0.2727]],

         [[-0.8709],
          [ 0.1008]],

         [[-0.8628],
          [ 0.1060]],

         [[-0.4789],
          [ 0.0051]],

         [[-0.4744],
          [ 0.1696]],

         [[-0.5888],
          [-0.0388]]],


        [[[-0.5740],
          [ 0.2727]],

         [[-0.8709],
          [ 0.1008]],

         [[-0.8628],
          [ 0.1060]],

         [[-0.4789],
          [ 0.0051]],

         [[-0.4744],
          [ 0.1696]],

         [[-0.5888],
          [-0.0388]]]], grad_fn=<ViewBackward0>)

2 2 6 1
tensor([[[[-0.5740],
          [-0.8709],
          [-0.8628],
          [-0.4789],
          [-0.4744],
          [-0.5888]],

         [[ 0.2727],
          [ 0.1008],
          [ 0.1060],
          [ 0.0051],
          [ 0.1696],
          [-0.0388]]],


        [[[-0.5740],
          [-0.8709],
          [-0.8628],
          [-0.4789],
          [-0.4744],
          [-0.5888]],

         [[ 0.2727],
          [ 0.1008],
          [ 0.1060],
          [ 0.0051],
          [ 0.1696],
          [-0.0388]]]], grad_fn=<TransposeBackward0>) 


tensor([[[[-0.5740],
          [-0.8709],
          [-0.8628],
          [-0.4789],
          [-0.4744],
          [-0.5888]],

         [[ 0.2727],
          [ 0.1008],
          [ 0.1060],
          [ 0.0051],
          [ 0.1696],
          [-0.0388]]],


        [[[-0.5740],
          [-0.8709],
          [-0.8628],
          [-0.4789],
          [-0.4744],
          [-0.5888]],

         [[ 0.2727],
          [ 0.1008],
          [ 0.1060],
          [ 0.0051],
          [ 0.1696],
          [-0.0388]]]], grad_fn=<TransposeBackward0>)

tensor([[[[-0.5740, -0.8709, -0.8628, -0.4789, -0.4744, -0.5888]],

         [[ 0.2727,  0.1008,  0.1060,  0.0051,  0.1696, -0.0388]]],


        [[[-0.5740, -0.8709, -0.8628, -0.4789, -0.4744, -0.5888]],

         [[ 0.2727,  0.1008,  0.1060,  0.0051,  0.1696, -0.0388]]]],
       grad_fn=<TransposeBackward0>)

2261

tensor([[[[-0.3536],
          [-0.3021],
          [-0.3015],
          [-0.1353],
          [-0.2052],
          [-0.1542]],

         [[ 0.3965],
          [-0.0289],
          [-0.0232],
          [-0.0978],
          [ 0.0870],
          [-0.1499]]],


        [[[-0.3536],
          [-0.3021],
          [-0.3015],
          [-0.1353],
          [-0.2052],
          [-0.1542]],

         [[ 0.3965],
          [-0.0289],
          [-0.0232],
          [-0.0978],
          [ 0.0870],
          [-0.1499]]]], grad_fn=<TransposeBackward0>)


2216
tensor([[[[-0.5740, -0.8709, -0.8628, -0.4789, -0.4744, -0.5888]],

         [[ 0.2727,  0.1008,  0.1060,  0.0051,  0.1696, -0.0388]]],


        [[[-0.5740, -0.8709, -0.8628, -0.4789, -0.4744, -0.5888]],

         [[ 0.2727,  0.1008,  0.1060,  0.0051,  0.1696, -0.0388]]]],
       grad_fn=<TransposeBackward0>)



[
    tensor([
        [   40,   367,  2885,  1464,  1807,  3619,   402,   271],
        [ 2885,  1464,  1807,  3619,   402,   271, 10899,  2138],
        [ 1807,  3619,   402,   271, 10899,  2138,   257,  7026]]
        ), 
    
    tensor([[  367,  2885,  1464,  1807,  3619,   402,   271, 10899],
        [ 1464,  1807,  3619,   402,   271, 10899,  2138,   257],
        [ 3619,   402,   271, 10899,  2138,   257,  7026, 15632]])]


input                                                            Target
[   40,   367,  2885,  1464,  1807,  3619,   402,   271]  [  367,  2885,  1464,  1807,  3619,   402,   271, 10899]

[ 2885,  1464,  1807,  3619,   402,   271, 10899,  2138]   [ 1464,  1807,  3619,   402,   271, 10899,  2138,   257],